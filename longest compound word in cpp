#include <bits/stdc++.h>
using namespace std;

class shubh
{
public:
    shubh *hash[26] = {0};

    int endword= 0;
    int prefix=0;
};  


bool compare(string &s1, string &s2)
{
    return s1.size() > s2.size();
}


void insertinshubh(shubh **root, string word, int length, int index)
{
    if (index < length)
    {       
        if (((*root)->hash[word[index] - 97]) == 0)
        {
            ((*root)->hash[word[index] - 97]) = new shubh();
        }
        ((*root)->hash[word[index] - 97])->prefix += 1;

        insertinshubh(&((*root)->hash[word[index] - 97]), word, length, index + 1);
    }
    if (index == length)

    {
        (*root)->endword = 1;
    }
}

int longest_compound_word(shubh **root, string word, int index, int length, int splited)
{
    shubh *curr = (*root);
    if (index < length)
    {
        if ((curr->hash[word[index] - 97]) == 0)
            return 0;
    }
    while (index < length)
    {   

        if (((curr->hash[word[index] - 97])->endword == 1) && (index != length - 1))
        {
            int x = longest_compound_word(root, word, index + 1, length, 1);
            if (x == 1)
            {
                return 1;
            }
        }
        curr = (curr->hash[word[index] - 97]);
        index += 1;
        if (((curr->hash[word[index] - 97]) == 0) && (index != length))
            return 0;
    }
    if ((index == length) && (splited == 1))
        return 1;
    if ((splited == 1) && ((curr->endword) == 1))
        return 1;
    return 0;
}

int main()
{
    freopen("input_02.txt", "r", stdin);
    freopen("output_02.txt", "w", stdout);

    shubh *root = new shubh();
    int n;
    vector<string> result;
    cin >> n;
    cin.ignore();
    for (int i = 0; i < n; i++)
    {
        string s;
        getline(cin, s);
        result.push_back(s);
        insertinshubh(&root, s, s.length(), 0);
    }

    sort(result.begin(), result.end(), compare);
    int not_present=1;
    int count=0;

    for (int i = 0; i < n; i++)

    {
        if (longest_compound_word(&root, result[i], 0, result[i].length(), 0) == 1)
        {
            cout << result[i]  << endl;
            count += 1;
            if (count == 2)
            {
            not_present=0;
            break;
            }
        }
    }

    if (not_present==1)
        cout<<"No compound word found";

}
